import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CircleX, Loader2, Bot, FileUp, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
import FileUpload from './FileUpload';

interface AIAssistantProps {
  onSave: (title: string, content: string) => void;
}

const AIAssistant: React.FC<AIAssistantProps> = ({ onSave }) => {
  const [text, setText] = useState('');
  const [result, setResult] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [summaryTitle, setSummaryTitle] = useState('');
  const { toast } = useToast();

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
  };

  const handleSubmit = async () => {
    if (!text.trim()) {
      toast({
        title: 'Empty input',
        description: 'Please enter some text to summarize.',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);
    // Here we would normally call an API for summarization
    // For now, we'll simulate it with a timeout
    setTimeout(() => {
      const summary = `This is a summary of the text you provided. In a real implementation, this would be generated by an AI model. The summary would highlight key points from your text and condense it into a more readable format.

Key points:
1. First important concept
2. Second important concept 
3. Third important concept

The summary would end with a conclusion paragraph that ties everything together.`;
      
      setResult(summary);
      setSummaryTitle(`Summary ${new Date().toLocaleDateString()}`);
      setIsLoading(false);
    }, 2000);
  };

  const handleFileUpload = async (file: File) => {
    setIsLoading(true);
    // Here we would normally process the PDF
    // For now, we'll simulate it with a timeout
    setTimeout(() => {
      setResult(`This is a summary of the PDF "${file.name}" you uploaded. In a real implementation, this would be generated by parsing the PDF and then summarizing it with an AI model.

The PDF appears to contain information about [topic], with several key sections:

Section 1: Overview
Section 2: Methodology
Section 3: Results
Section 4: Conclusion

Key takeaways:
1. First important concept from the PDF
2. Second important concept from the PDF
3. Third important concept from the PDF`);
      
      setSummaryTitle(`Summary of ${file.name}`);
      setIsLoading(false);
    }, 2000);
  };

  const handleSave = () => {
    if (result) {
      onSave(summaryTitle, result);
      toast({
        title: 'Summary saved',
        description: 'Your summary has been saved successfully.',
      });
      setText('');
      setResult('');
      setSummaryTitle('');
    }
  };

  const handleClear = () => {
    setText('');
    setResult('');
  };

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-3">
        <CardTitle className="text-xl flex items-center gap-2">
          <Bot className="h-5 w-5" />
          AI Study Assistant
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="text" className="w-full">
          <TabsList className="grid grid-cols-2 mb-4">
            <TabsTrigger value="text" className="flex items-center gap-1.5">
              <FileText className="h-4 w-4" />
              <span>Text</span>
            </TabsTrigger>
            <TabsTrigger value="file" className="flex items-center gap-1.5">
              <FileUp className="h-4 w-4" />
              <span>Upload PDF</span>
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="text" className="mt-0">
            <div className="space-y-4">
              <Textarea
                placeholder="Enter your notes here to summarize..."
                className="min-h-[200px] resize-none"
                value={text}
                onChange={handleTextChange}
                disabled={isLoading}
              />
              
              <div className="flex justify-end space-x-2">
                <Button
                  variant="outline"
                  onClick={handleClear}
                  disabled={!text || isLoading}
                  className="flex items-center gap-1"
                >
                  <CircleX className="h-4 w-4" />
                  Clear
                </Button>
                <Button
                  onClick={handleSubmit}
                  disabled={!text || isLoading}
                  className="flex items-center gap-1"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <Bot className="h-4 w-4" />
                      Summarize
                    </>
                  )}
                </Button>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="file" className="mt-0">
            <FileUpload onUpload={handleFileUpload} isLoading={isLoading} />
          </TabsContent>
        </Tabs>

        <AnimatePresence>
          {result && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="mt-6 overflow-hidden"
            >
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Summary</h3>
                  <input
                    type="text"
                    placeholder="Summary title"
                    className="text-sm px-2 py-1 border rounded-md focus:outline-none focus:ring-1 focus:ring-primary"
                    value={summaryTitle}
                    onChange={(e) => setSummaryTitle(e.target.value)}
                  />
                </div>
                <div className="p-4 bg-secondary/50 rounded-lg text-sm whitespace-pre-line">
                  {result}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </CardContent>
      
      {result && (
        <CardFooter className="justify-end pt-0">
          <Button 
            onClick={handleSave}
            className="flex items-center gap-1"
          >
            Save Summary
          </Button>
        </CardFooter>
      )}
    </Card>
  );
};

export default AIAssistant;
